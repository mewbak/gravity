package main

import (
	"fmt"
	"os"
	"os/exec"
)

const versionTemplate = `// Code generated by gravity-development-toolkit. DO NOT EDIT.
package gravity

//go:generate go run ./developing/tools genversion

// Version ...
const Version = "ep01-%s (expirimental/prototyping)"
`

func genversion() {
	var (
		gitCmdName = "git"
		gitCmdArgs = []string{"rev-parse", "--verify", "HEAD"}
	)

	fmt.Println("genversion running...")
	checkCommand(gitCmdName)

	var log []byte
	var err error
	if log, err = exec.Command(gitCmdName, gitCmdArgs...).Output(); err != nil {
		fmt.Println(gitCmdName, "errored with:\n", err, "\n", string(log))
		os.Exit(1)
	}

	sha := string(log)
	val := sha[:6]
	generateVersionFile(val)
}

func generateVersionFile(val string) {
	const outfile = "../../version.go"
	f, err := os.Create(outfile)
	if err != nil {
		fmt.Println("unable to create \""+outfile+"\": ", err)
		os.Exit(1)
	}
	defer f.Close()
	_, err = f.WriteString(
		fmt.Sprintf(versionTemplate, val),
	)
	if err != nil {
		fmt.Println("unable to write to \""+outfile+"\": ", err)
		os.Exit(1)
	}
}
